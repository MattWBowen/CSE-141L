//designated 5 bit for op code, which means we can have up to 25 instructions
//we have 16 register r0~r15, and by default r0 is the accumulator
//General purpose registers are indicated with a dollar sign ($)
//Immediate is indicated with a pound sign (#)
//All register, immediate and datapath is 8 bit wide

1. take
description:    the content of the operand register is move(take) into the accumulator register
operation:      $accumulator = $reg
syntax:         take $reg

2. put
description:    the content of the accumulator register is move(put) into the operand register
operation:      $reg = $accumulator
syntax:         put $reg

3. takei    --  take immediate
description:    an immediate is move(take) into the accumulator register
operation:      $accumulator = imm
syntax:         takei imm

4. load
description:    a byte is loaded into the accumulator from the address specified by operand register
operation:      $accumulator = MEM[$reg]
syntax:         load $reg

5. store 
description:    the content of accumulator is stored at the addres specified by operand register
operation:      MEM[$reg] = $accumulator
syntax:         store $reg

6. xor      --  bitwise exclusive or
description:    exclusive or the operand register with accumulator and store the result into accumulator 
operation:      $accumulator = $accumulator ^ $reg
syntax:         xor $reg

7. shl      --  shift left
description:    Shifts accumulator left by the amount of immediate operand. Zeroes are shifted in.
operation:      $accumulator = $accumulator << imm
syntax:         shl imm

8. shr      --  shift right 
description:    Shifts accumulator right by the amount of immediate operand. Zeroes are shifted in.
operation:      $accumulator = $accumulator >> imm
syntax:         shl imm

9. beq      --  branch on equal
description:    branch to the LABLE if the operand register is equal to accumulator
operation:      if $accumulator == $reg, move program counter to LABLE
syntax:         beq $reg, LABLE

10. bne     --  branch on not equal
description:    branch to the LABLE if the operand register is NOT equal to accumulator
operation:      if $accumulator != $reg, move program counter to LABLE
syntax:         bne $reg, LABLE
