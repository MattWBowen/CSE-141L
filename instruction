//we have 16 register r0~r15, and by default r0 is the accumulator, and r1 is the branch register
//General purpose registers are indicated with a dollar sign ($)
//branch register, r1, holds addresses in memory
//Immediate is indicated with a pound sign (#)


we have two type of instruction: R-type and I-type(special instruction), which is determined by the first bit of 9 bits instruction,
we defined this first bit as "type bit"

Normal-type: when the type bit is 0
    for the rest 8 bits, 4 bits for op code(16 opcodes in R-type), and 4 bits for operand (up to 16 registers in R-type)

Special-tpye: when the type bit is 1
    the remaining 8 bit are all used for immediate(up to 255), and the operation is stored the immediate into accumulator
    thus only one operation exist in I-type, we can treat it as an special instruction
    

0. takei    --  take immediate  [special I-type instruction]
description:    an immediate is move(take) into the accumulator register
operation:      $accumulator = #imm
syntax:         takei #imm
type:           special-type
encode:         1

1. take
description:    the content of the operand register is move(take) into the accumulator register
operation:      $accumulator = $reg
syntax:         take $reg
type:           normal-type

2. put
description:    the content of the accumulator register is move(put) into the operand register
operation:      $reg = $accumulator
syntax:         put $reg
type:           normal-type

3. load
description:    a byte is loaded into the accumulator from the address specified by operand register
operation:      $accumulator = MEM[$reg]
syntax:         load $reg
type:           normal-type

4. store 
description:    the content of accumulator is stored at the addres specified by operand register
operation:      MEM[$reg] = $accumulator
syntax:         store $reg
type:           normal-type
type:           R-type

5. xor      --  bitwise exclusive or
description:    exclusive or the operand register with accumulator and store the result into accumulator 
operation:      $accumulator = $accumulator ^ $reg
syntax:         xor $reg
type:           normal-type

6. nand      -- nand gate
description:    combinantion of and and not operation
operation:      $accumulator = $accumulator nand $reg
syntax:         nand $reg
type:           normal-type

7. shl      --  shift left
description:    Shifts accumulator left by the amount specified by a register. Zeroes are shifted in.
operation:      $accumulator = $accumulator << $reg
syntax:         shl $reg
type:           normal-type

8. shr      --  shift right 
description:    Shifts accumulator right by the amount specified by a register. Zeroes are shifted in.
operation:      $accumulator = $accumulator >> $reg
syntax:         shl $reg
type:           normal-type

9. b0      --   branch on true
description:    branch to the branch register = &[LABLE] if the accumulator has a value of 0
operation:      if $accumulator == 0, move program counter to &[LABLE]
syntax:         b1 LABLE
type:           normal-type

10. lsn     --   check if acc is less than register
description:    compare a register with the accumulator and put 1 in accumulator if accumulator is less than register
operation:      if $accumulator < $reg, $accumulator = 1, else accumulator = 0
syntax:         lsn $reg
type:           normal-type

11. eql
description:    check if acc is equal to register
operation:      if $accumulator == $reg, $accumulator = 1, else $accumulator = 0
syntax:         eql $reg
type:           normal-type

12. add
description:    add the operand register to the accumulator 
operation:      $accumulator = $accumulator + $reg
syntax:         add $reg
type:           normal-type

13. sub
description:    sub the operand register from the accumulator 
operation:      $accumulator = $accumulator - $reg
syntax:         sub $reg
type:           normal-type

14. of0     --  set over flow bit register to zero
description:    set over flow bit register to zero
operation:      $16 = 0
syntax:         of0
type:           normal-type

15. 
description:    
operation:     
syntax:       
type:        

16. 
description:    
operation:     
syntax:       
type:        

