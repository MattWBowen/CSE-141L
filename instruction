//we have 15 register r0~r14, and by default r0 is the accumulator
//General purpose registers are indicated with a dollar sign ($)
//Immediate is indicated with a pound sign (#)


we have two type of instruction: R-type and I-type(special instruction), which is determined by the first bit of 9 bits instruction,
we defined this first bit as "type bit"

R-type: when the type bit is 0
    for the rest 8 bits, 4 bits for op code(15 instructions in R-type), and 4 bits for operand(up to 15 registers)

I-tpye: when the type bit is 1
    the remaining 8 bit are all used for immediate(up to 255), and the operation is stored the immediate into accumulator
    thus only one operation exist in I-type, we can treat it as an special instruction
    

0. takei    --  take immediate  [special I-type instruction]
description:    an immediate is move(take) into the accumulator register
operation:      $accumulator = #imm
syntax:         takei #imm
type:           I-type
encode:         1

1. take
description:    the content of the operand register is move(take) into the accumulator register
operation:      $accumulator = $reg
syntax:         take $reg
type:           R-type

2. put
description:    the content of the accumulator register is move(put) into the operand register
operation:      $reg = $accumulator
syntax:         put $reg
type:           R-type

3. load
description:    a byte is loaded into the accumulator from the address specified by operand register
operation:      $accumulator = MEM[$reg]
syntax:         load $reg
type:           R-type

4. store 
description:    the content of accumulator is stored at the addres specified by operand register
operation:      MEM[$reg] = $accumulator
syntax:         store $reg
type:           R-type

5. xor      --  bitwise exclusive or
description:    exclusive or the operand register with accumulator and store the result into accumulator 
operation:      $accumulator = $accumulator ^ $reg
syntax:         xor $reg
type:           R-type

6. shl      --  shift left
description:    Shifts accumulator left by the amount of immediate operand. Zeroes are shifted in.
operation:      $accumulator = $accumulator << imm
syntax:         shl imm
type:           R-type

7. shr      --  shift right 
description:    Shifts accumulator right by the amount of immediate operand. Zeroes are shifted in.
operation:      $accumulator = $accumulator >> imm
syntax:         shl imm
type:           R-type

8. beq      --  branch on equal
description:    branch to the LABLE if the operand register is equal to accumulator
operation:      if $accumulator == $reg, move program counter to LABLE
syntax:         beq $reg, LABLE
type:           R-type

9. bne     --  branch on not equal
description:    branch to the LABLE if the operand register is NOT equal to accumulator
operation:      if $accumulator != $reg, move program counter to LABLE
syntax:         bne $reg, LABLE
type:           R-type

10. add
description:    add the operand register to the accumulator 
operation:      $accumulator = $accumulator + $reg
syntax:         add $reg
type:           R-type

11. addi
description:    add the operand register to the accumulator 
operation:      $accumulator = $accumulator + #imm 
syntax:         add #imm 
type:           R-type
