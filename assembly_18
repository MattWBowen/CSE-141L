r0 = accumulator
r1 ~ r5 = single_match ~ quintuple_match
r6 = string / temporary
r7 = temp_string
r8 = key
r9 = isOne
r10= result
r11= count
r12= counter of LOAD_MEM
r13= counter of FIVE
r14= memory address
r15= temporary shift amount

        //initialize count and match counter
        takei #0

        put r1              //single_match=0
        put r2              //...
        put r3              //
        put r4              //
        put r5              //quintuple_match=0

        //start loading key and string from memory
        takei #9            //take 9 into acc
        put r14             //r14=9
        load r14            //load the byte of memory at address r14 (which is 9) into accumulator

        put r8              //put the content of accumulator into r8, key stored

        //set up r12, counter of the loop LOAD_MEM
        takei #0            //load immediate 0 into accumulator
        put r12             //put 0 into r12, r12 is the counter to loop through 64 bytes

LOAD_MEM:
        takei #0
        put r11             //count=0, reset the count at begin of loop loading string

        takei #32           //take address 9 into acc
        add r12             //add the address offset into accumulator
        put r14             //r14=32+r13
        load r14            //load the byte of memory at address 32+r12 into accumulator
        
        put r6              //save the string you are comparing into r6
        
        //key = key << 4;
        //key = key >> 4;
        takei #4
        put r15             //r15 = shift amount = 4
        take r8             //take key into accumulator, acc = key
        shl r15             //shift the key to the left by 4 bit
        shr r15             //shift the key to the right by 4 bit
        put r8              //put key back

        //set up counter of loop FIVE r13
        takei #0
        put r13

FIVE:   
        //temp_string(r7) = string(r6)
        take r6
        put r7

        take r7     //acc=r7=temp_string
        shl r13     //temp_string << i
        shr r13     //temp_string >> i
        put r7      //save temp_string

        //acc = 4-i
        takei #4
        sub r13
        put r6      //since we do NOT use r6 after we load the string from memory, reuse it
        
        //temp_string = temp_string << (4-i)
        take r7     //acc = temp_string
        shl r6      //shift left (4-i)
        put r7      //store the result back to temp_string

        //result = temp_string ^ key
        xor r8
        put r10

        //if(!result) count++
        takei #0
        eql r10             //if result == 0, count++ acc=1
        b0 SKIP

        takei #1
        add r11
        put r11             //count++
SKIP:
        //r13(i)++, if i<5 loop again
        takei #5
        put r15
        takei #1
        add r13
        put r13
        lsn r15
        b0 OUT_FIVE
        takei #0
        b0 FIVE

OUT_FIVE:
        //check count and increment corresponding match
        takei #1
        eql r11
        put r15
        takei #0
        eql r15
        b0 SINGLE

        takei #2
        eql r11
        put r15
        takei #0
        eql r15
        b0 DOUBLE

        takei #3
        eql r11
        put r15
        takei #0
        eql r15
        b0 TRIPLE

        takei #4
        eql r11
        put r15
        takei #0
        eql r15
        b0 QUADRUPLE

        takei #5
        eql r11
        put r15
        takei #0
        eql r15
        b0 QUINTUPLE

SINGLE:
        takei #1
        add r1
        put r1
        takei #0
        b0 BREAK
DOUBLE:
        takei #1
        add r2
        put r2
        takei #0
        b0 BREAK
TRIPLE:
        takei #1
        add r3
        put r3
        takei #0
        b0 BREAK
QUADRUPLE:
        takei #1
        add r4
        put r4
        takei #0
        b0 BREAK
QUINTUPLE:
        takei #1
        add r5
        put r5
BREAK:
        //r12++, if i<64 loop LOAD_MEM
        takei #64                   //acc = 64
        put r15
        takei #1
        add r12
        put r12
        lsn r15
        b0 OUT_LOAD_MEM

        takei #0
        b0 LOAD_MEM

OUT_LOAD_MEM:
        //store match# into memory
        takei #10
        put r6
        take r1
        store r6    //mem[r6] = mem[10] = r1 = single_match
        
        takei #11
        put r6
        take r2
        store r6    //mem[r6] = mem[11] = r2 = double_match

        takei #12
        put r6
        take r3
        store r6    //mem[r6] = mem[12] = r3 = triple_match

        takei #13
        put r6
        take r4
        store r6    //mem[r6] = mem[13] = r4 = quadruple_match

        takei #14
        put r6
        take r5
        store r6    //mem[r6] = mem[14] = r5 = quintuple_match
END





