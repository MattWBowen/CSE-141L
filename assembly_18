r0 = accumulator
r1 ~ r5 = single_match ~ quintuple_match
r6 = string / temporary
r7 = temp_string
r8 = key
r9 = isOne
r10= result
r11= count
r12= counter of LOAD_MEM
r13= counter of FIVE
r14= memory address

        //initialize count and match counter
        takei #0

        put r1              //single_match=0
        put r2              //...
        put r3              //
        put r4              //
        put r5              //quintuple_match=0


        //start loading key and string from memory
        takei #9            //take 9 into acc
        put r14             //r14=9
        load r14            //load the byte of memory at address r14 (which is 9) into accumulator

        put r8              //put the content of accumulator into r8, key stored

        //set up r12, counter of the loop LOAD_MEM
        takei #0            //load immediate 0 into accumulator
        put r12             //put 0 into r12, r12 is the counter to loop through 64 bytes

LOAD_MEM:
        put r11             //count=0, reset the count at begin of loop loading string

        takei #32           //take address 9 into acc
        add r12             //add the address offset into accumulator
        put r14             //r14=32+r13
        load r14            //load the byte of memory at address 32+r12 into accumulator
        
        put r6              //save the string you are comparing into r6
        
        //key = key << 4;
        //key = key >> 4;
        take r8             //take key into accumulator, acc = key
        shl #4              //shift the key to the left by 4 bit
        shr #4              //shift the key to the right by 4 bit
        put r8              //put key back

        //set up counter of loop FIVE r13
        takei #0
        put r13

FIVE:   
        //temp_string(r7) = string(r6)
        take r6
        put r7

        take r7     //acc=r7=temp_string
        shl r13     //temp_string << i
        shr #4      //temp_string >> i
        put r7      //save temp_string

        //acc = 4-i
        takei #4
        sub r13
        put r6      //since we do NOT use r6 after we load the string from memory, reuse it
        
        //temp_string = temp_string << (4-i)
        take r7     //acc = temp_string
        shl r6      //shift left (4-i)
        put r7      //store the result back to temp_string

        //result = temp_string ^ key
        xor r8
        put r10

        //if(!result) count++
        takei #0
        bne r10, SKIP       //if result == 0
        take r11
        addi #1      
        put r11
SKIP:

        //r13(i)++, if i<5 loop again
        take r13
        addi #1
        put r13

        takei #5
        beq r13, OUT_FIVE
        jmp FIVE
OUT_FIVE:

        //check count and increment corresponding match
        take r11
        takei #1
        beq r11, SINGLE

        takei #2
        beq r11, DOUBLE
        
        takei #3
        beq r11, TRIPLE

        takei #4
        beq r11, QUADRUPLE

        takei #5
        beq r11, QUINTUPLE

SINGLE:
        take r1
        addi #1
        put r1
        jmp BREAK
DOUBLE:
        take r2
        addi #1
        put r2
        jmp BREAK
TRIPLE:
        take r3
        addi #1
        put r3
        jmp BREAK
QUADRUPLE:
        take r4
        addi #1
        put r4
        jmp BREAK
QUINTUPLE:
        take r5
        addi #1
        put r5
BREAK:

        //r12++, if i<64 loop LOAD_MEM
        take r12            
        addi #1
        put r12

        takei #64                   //acc = 64
        beq r12, OUT_LOAD_MEM       //if i==64
        jmp LOAD_MEM
OUT_LOAD_MEM:

        //store match# into memory
        takei #10
        put r6
        take r1
        store r6    //mem[r6] = mem[10] = r1 = single_match
        
        takei #11
        put r6
        take r2
        store r6    //mem[r6] = mem[11] = r2 = double_match

        takei #12
        put r6
        take r3
        store r6    //mem[r6] = mem[12] = r3 = triple_match

        takei #13
        put r6
        take r4
        store r6    //mem[r6] = mem[13] = r4 = quadruple_match

        takei #14
        put r6
        take r5
        store r6    //mem[r6] = mem[14] = r5 = quintuple_match

END





